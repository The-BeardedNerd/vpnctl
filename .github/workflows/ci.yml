# CI/CD Pipeline for VPNCTL
# Runs on: Pull Requests, Push to main/develop
# Purpose: Test across distributions, lint code, ensure quality

name: CI/CD Pipeline

# When to run this workflow
on:
  # Run on pull requests to any branch  
  pull_request:
    branches: [ "*" ]
  
  # Run when pushing to main or develop branches
  push:
    branches: [ main, develop ]
    
  # Allow manual triggering for testing
  workflow_dispatch:

# Cancel previous runs if new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Quick checks (fast feedback)
  lint-and-validate:
    name: "üîç Lint & Validate"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          
      - name: Lint shell scripts
        run: |
          # Lint all shell scripts
          find . -name "*.sh" -o -name "vpnctl" | xargs shellcheck
          
      - name: Validate project structure
        run: |
          # Check required files exist
          test -f bin/vpnctl
          test -f README.md
          test -f LICENSE
          test -f CONTRIBUTING.md
          test -d tests/
          echo "‚úÖ Project structure validation passed"

  # Job 2: Test across distributions (core functionality)  
  test-distributions:
    name: "üß™ Test on ${{ matrix.distribution }}"
    runs-on: ubuntu-latest
    needs: lint-and-validate  # Only run if linting passes
    
    strategy:
      # Don't fail fast - test all distributions even if one fails
      fail-fast: false
      matrix:
        distribution: [arch, ubuntu, fedora]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
          
      # Cache container images to save time and bandwidth
      - name: Cache container image
        uses: actions/cache@v3
        with:
          path: ~/.local/share/containers
          key: container-${{ matrix.distribution }}-${{ hashFiles('Containerfile*') }}
          restore-keys: |
            container-${{ matrix.distribution }}-
            
      - name: Build container (${{ matrix.distribution }})
        run: |
          if [ "${{ matrix.distribution }}" = "arch" ]; then
            podman build -t vpnctl:${{ matrix.distribution }} -f Containerfile .
          else
            podman build -t vpnctl:${{ matrix.distribution }} -f Containerfile.${{ matrix.distribution }} .
          fi
          
      - name: Run tests (${{ matrix.distribution }})
        run: |
          # Run tests inside the container using just command
          podman run --rm \
            -v $(pwd):/vpnctl:Z \
            -w /vpnctl \
            vpnctl:${{ matrix.distribution }} \
            test
            
      - name: Test installation (${{ matrix.distribution }})
        run: |
          # Test that installation script works (containers run as root = system install)
          podman run --rm \
            -v $(pwd):/vpnctl:Z \
            -w /vpnctl \
            --entrypoint bash \
            vpnctl:${{ matrix.distribution }} \
            -c "
              echo '=== Testing Installation Script ==='
              
              # Run installation script
              ./scripts/install.sh
              
              echo '=== Verifying Installation ==='
              
              # In containers we run as root, so binary goes to /usr/local/bin
              if [[ \$EUID -eq 0 ]]; then
                VPNCTL_PATH='/usr/local/bin/vpnctl'
                echo 'Testing system installation (running as root)'
              else
                VPNCTL_PATH='~/.local/bin/vpnctl'
                echo 'Testing user installation'
              fi
              
              # Verify binary exists and is executable
              test -x \"\$VPNCTL_PATH\"
              echo \"‚úÖ Binary found at \$VPNCTL_PATH\"
              
              # Test basic commands
              \"\$VPNCTL_PATH\" version
              \"\$VPNCTL_PATH\" help >/dev/null
              echo '‚úÖ Basic commands work'
              
              # Verify config directory structure
              if [[ \$EUID -eq 0 ]]; then
                test -d '/etc/vpnctl'
                test -d '/etc/vpnctl/profiles'
                test -f '/etc/vpnctl/config.ini'
                echo '‚úÖ System config directories created'
              else
                test -d \"\$HOME/.config/vpnctl\"
                test -d \"\$HOME/.config/vpnctl/profiles\"
                test -f \"\$HOME/.config/vpnctl/config.ini\"
                echo '‚úÖ User config directories created'
              fi
              
              echo 'üéâ Installation test passed!'
            "

  # Job 3: Security and quality checks
  security-scan:
    name: "üîí Security & Quality"
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for secrets
        run: |
          # Check for actual secrets (not documentation references)
          if grep -r -E "(password|secret|token)\s*=\s*['\"][^'\"]+['\"]" --include="*.sh" --include="*.yml" . | grep -v "# Example\|TODO\|placeholder\|template"; then
            echo "‚ùå Potential secrets found in code!"
            exit 1
          else
            echo "‚úÖ No secrets detected"
          fi
          
      - name: Check file permissions
        run: |
          # Ensure scripts are executable
          test -x bin/vpnctl
          test -x scripts/install.sh
          echo "‚úÖ File permissions are correct"
          
      - name: Validate container security
        run: |
          # Check Containerfiles for security issues
          if grep -i "sudo\|su\|--privileged" Containerfile*; then
            echo "‚ö†Ô∏è  Found potential security issues in containers"
            # Don't fail for now, just warn
          else
            echo "‚úÖ Container security validation passed"
          fi

  # Job 4: Documentation and examples
  documentation:
    name: "üìö Documentation"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'  # Only on PRs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check documentation completeness
        run: |
          # Check that key documentation exists
          test -f README.md
          test -f CONTRIBUTING.md
          test -f docs/development/ARCHITECTURE.md
          test -f docs/development/PLAN.md
          
          # Check for TODO markers that should be completed
          if grep -r "TODO.*Implement" bin/ scripts/ 2>/dev/null; then
            echo "‚ÑπÔ∏è  Found implementation TODOs (expected for development phase)"
          fi
          
          echo "‚úÖ Documentation structure is complete"

# Summary job (optional but helpful for branch protection)
  ci-success:
    name: "‚úÖ CI Complete"
    runs-on: ubuntu-latest
    needs: [lint-and-validate, test-distributions, security-scan]
    if: always()  # Run even if some jobs failed
    
    steps:
      - name: Check results
        run: |
          # Check if all required jobs succeeded
          if [ "${{ needs.lint-and-validate.result }}" != "success" ] || \
             [ "${{ needs.test-distributions.result }}" != "success" ] || \
             [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "‚ùå Some required checks failed"
            exit 1
          else
            echo "‚úÖ All required checks passed!"
          fi